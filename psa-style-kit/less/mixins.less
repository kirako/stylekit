/*#region == UTILITY CLASSES ==*/

// Style text for no data
.no-items {
    .add-font-sizes;
    font-style: italic;
    text-align: center;

    &:not(tr) {
        color: @none-text;
        padding: 20px 0;
        display: block;
    }

    tr& {
        display: table-row;

        > td {
            .inner-glow(@alpha: 5);
            color: @table-none-text;
            background-color: @table-none-bg;
            display: table-cell;
            padding: 25px 0;
        }
    }
}

// Force text to wrap in its container.
.wordwrap {
    text-wrap: wrap;
    -ms-word-break: break-word;
    word-break: break-word;
    -ms-word-wrap: break-word;
    word-wrap: break-word;
}

// Add a ... where text is clipped.
.ellipsis {
    overflow: hidden;
    -ms-text-overflow: ellipsis;
    -o-text-overflow: ellipsis;
    text-overflow: ellipsis;
    white-space: nowrap;
}

// Shorten text
.shorten {
    .ellipsis;
    width: 100%;
    display: block;
    cursor: help;
	padding: 1px 0;
}

// Float an element left or right.
.pull-right {
    float: right;
}

.pull-left {
    float: left;
}

// Flexbox quick style
.flex {
    .flexbox;
    .justify-content(space-between);

    > i {
        .flex(2013, none);
        font-size: @font-size;
        margin-right: 5px;
    }
}

// Properly clear an element (aka the Clear Fix).
.clear {
    &:before, &:after {
        content: " ";
        display: table;
    }

    &:after {
        clear: both;
    }
}

// Hide an element.
.hide {
    display: none;
}

// Dim an element
.dim {
    .opacity(.5);

    &:hover {
        .opacity(1);
    }
}

// Position an element flush to its parent
.flush {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
}

/*#endregion*/

/*#region == LOOPS & PREFIXES ==*/

    // For mixin
    .for(@i, @n) {.-each(@i)}
    .for(@n)     when (isnumber(@n)) {.for(1, @n)}
    .for(@i, @n) when not (@i = @n)  {
        .for((@i + (@n - @i) / abs(@n - @i)), @n);
    }

    // Foreach mixin
    .for(@array)   when (default()) {.for-impl_(length(@array))}
    .for-impl_(@i) when (@i > 1)    {.for-impl_((@i - 1))}
    .for-impl_(@i) when (@i > 0)    {.-each(extract(@array, @i))}

    // Prefixing
    .prefix(@property, @value) {
        -webkit-@{property}: @value;
        -moz-@{property}: @value;
        -ms-@{property}: @value;
        -o-@{property}: @value;
        @{property}: @value;
    }
    .prefix-multi(@property, @value) {
        -webkit-@{property}+: @value;
        -moz-@{property}+: @value;
        -ms-@{property}+: @value;
        -o-@{property}+: @value;
        @{property}+: @value;
    }

/*#endregion*/

/*#region == COLOR == */
    .add-colors() {
        .for(@color-names); .-each(@name) {
    		@color: e(@name);
            &.@{color} {
                .change-color(@@color);
            }
        }

        &.transparent {
            background-color: fade(@black, 30);
            color: @white;
        }
    }

	// Add color scheme
    .add-color-scheme(@list-name, @list-items) {
		@name: e(@list-name);
		.for(@list-items); .-each(@item) {
    		@clean: e(@item);
			@color: ~"@{clean}-@{name}";

			&.@{clean}.@{name} {
				.change-color(@@color);
			}
		}
    }

	// Change element color
	.change-color(@color) {
        background-color: @color;
        color: contrast(@color);
	}

	// Change text highlight color
    .text-highlight-color(@bg, @text) {
        .selection { 
            .text-shadow(none);
            background: @bg;   
            color: @text; 
        }

        ::selection      { .selection; }  /* Webkit */
        ::-moz-selection { .selection; }  /* Mozilla */
    }
/*#endregion*/

/*#region == TYPOGRAPHY == */
    // Declare a custom font.
    .font-face(@name, @filename, @weight: normal, @style: normal, @path: @path-fonts) {
        @font-face {
            font-family: @name;
            src: url('@{path}@{filename}.eot');
            src: url('@{path}@{filename}.eot?#iefix') format('embedded-opentype'), 
                url('@{path}@{filename}.woff') format('woff'), 
                url('@{path}@{filename}.ttf') format('truetype'), 
                url('@{path}@{filename}.svg') format('svg');
            font-weight: @weight;
            font-style: @style;
        }
    }
    .font-face-woff(@name, @filename, @weight: normal, @style: normal, @path: @path-fonts) {
        @font-face {
            font-family: @name;
            src: url('@{path}@{filename}.woff') format('woff');
            font-weight: @weight;
            font-style: @style;
        }
    }

    // Pre-load a font - helps prevent distortion.
    .load-font(@font) {
        font-family: @font;
        position: absolute;
        z-index: -10;
        content: " ";
    }

    // Change font size
    .font-size(@size: size) {
        font-size: ~"@{font-@{size}}";
        line-height: ~"@{font-@{size}}";
    }
    .add-font-sizes() {
        .for(@fontsizes); .-each(@name) {
            &.@{name} {
                .font-size(@name);
            }
        }
    }

    // Set a text shadow.
    .text-shadow (@string: 0 1px 3px fade(@black, 25)) {
        text-shadow: @string;
    }

    // Force text to wrap and add hyphens.
    .hyphens(@mode: auto) {
        .wordwrap;
        .prefix(hyphens, @mode);
    }

    // Truncate text after a certain width.
    .truncate(@width) {
        .ellipsis;
        max-width: @width;
        min-width: @width;
    }
/*#endregion*/

/*#region == STRUCTURE == */
    // Equalize an elements box model.
    .box-sizing(@type: border-box) {
        .prefix(box-sizing, @type);
    }

    // Allow the user to resize an element (basic support for textarea).
    .resizable(@direction: both) {
        resize: @direction;
        overflow: auto;
    }

    // Set an element's size.
    .size(@width: auto, @height: auto) {
        width: @width;
        height: @height;
    }

    // Generate columns in a flexbox layout
    .generate-columns(@number, @i: 1) when (@i =< @number) {
        .columns-@{i} {
            .flexbox;
            .justify-content(space-between);
            .flex-wrap(wrap);
            width: 100%;
            > * {
                width: round((100% / @i) - 1);
            }
            .make-snowflakes(@i);
        }
        .generate-columns(@number, (@i + 1));
    }
    .make-snowflakes(@i) when (@i = 3) {
        &.narrow {
            > * {
                &:first-of-type {
                    width: 28%;
                }
                &:not(:first-of-type) {
                    width: 40%;
                }
            }
        }
        &.wide {
            > * {
                &:first-of-type {
                    width: 40%;
                }
                &:not(:first-of-type) {
                    width: 28%;
                }
            }
        }
    }
    .make-snowflakes(@i) when (@i = 2) {
        &.narrow {
            > * {
                &:first-of-type {
                    width: 32%;
                }
                &:last-of-type {
                    width: 67%;
                }
            }
        }
        &.wide {
            > * {
                &:first-of-type {
                    width: 67%;
                }
                &:last-of-type {
                    width: 32%;
                }
            }
        }
    }

    // Resize container based on combined child widths
    // @number = number of items, @one = width of one item
    .set-width(@number, @width: 25px, @i: 1) when (@i =< @number) {
        &.items-@{i} {
            width: round(@i * @width);
            min-width: round(@i * @width);

			&.has-scrollbar {
				width: round(@i * @width) + 10;
				min-width: round(@i * @width) + 10;
			}
        }
        .set-width(@number, @width, (@i + 1));
    }

    // Position things based on width
    .set-position(@number, @width, @i: 2) when (@i =< @number) {
        &:nth-of-type(@{i}) {
            right: round((@i - 1) * @width);
        }
        .set-position(@number, @width, (@i + 1));
    }

/*#endregion*/

/*#region == FORMS == */

    // Color the placeholder value.
    .placeholder(@color: @input-placeholder, @size: @font-size) {
        &::-webkit-input-placeholder {
            color: @color;
            line-height: round(@size * 1.3);
            font-size: @size;
            font-family: @form-font;
            font-style: italic;
        }

        &::-moz-placeholder {
            color: @color;
            line-height: round(@size * 1.3);
            font-size: @size;
            font-family: @form-font;
            font-style: italic;
        }

        &:-ms-input-placeholder {
            color: @color;
            line-height: round(@size * 1.3);
            font-size: @size;
            font-family: @form-font;
            font-style: italic;
        }
    }

    // Remove all styling on an element.
    .reset() {
        .box-shadow(none);
        .text-shadow(none);
        .border-radius(0);
        border: 0 none;
        background: none;
        font-size: @font-size;
        color: inherit;
        padding: 0;
        margin: 0;
    }

    // Add a glowing focus effect.
    .focus(@color) {
        .box-shadow(0 0 5px @color);
        border-color: darken(@color, 10);
        outline: 0;
        outline: thin dotted \9;
    }

    // Change button highlight based on color.
    .button-inset(@color) when (@color = @black) {
        .box-shadow(inset 0 1px 0 0 fade(@white, 3));
    }
    .button-inset(@color) when (default()) {
        .box-shadow(inset 0 1px 0 0 fade(@white, 10));
    }

    // Change button color
    .button-color(@color) {
        background-color: @color;
        color: fade(contrast(@color), 80);

		&:not([disabled]):not(.disabled):not(.transparent) {
			&:active, &.active, &:focus, &:hover {
				background-color: lighten(@color, 5);
				color: contrast(@color);
			}
		}
    }

	// Add button color scheme
	.add-button-scheme(@list-name, @list-items) {
		@name: e(@list-name);
		.for(@list-items); .-each(@item) {
    		@clean: e(@item);
			@color: ~"@{clean}-@{name}";

			&.@{clean}.@{name} {
				.button-inset(@@color);
				.button-color(@@color);
			}
		}
	}

    // Button hover
    .button-hover(@color) {
        .keyframes(~"button-hover-@{color}", {
	        50% {
		        background-color: darken(@@color, 15);
	        }
        });

        &:not([disabled]):not(.disabled) {
            .animation(~"button-hover-@{color}" 2s linear 0s infinite);
        }
    }

    // Remove a focus glow effect.
    .nofocus(@original-border-color) {
        .box-shadow(0);
        border-color: @original-border-color;
        outline: 0;
        outline: thin dotted \9;
    }

    // Color a validation message.
    .validate(@color) {
        position: relative;
        background-color: lighten(@color, 32);
        border-bottom: 2px solid lighten(@color, 25);
        color: darken(@color, 25);

        &:after {
            border-bottom-color: lighten(@color, 32);
        }
    }

/*#endregion*/

/*#region == VISUAL EFFECTS == */

    .no-select() {
        -webkit-touch-callout: none;
        .prefix(user-select, none);
    }

    .opacity(@value: 0.5) {
        .prefix(opacity, @value);
        @value-ie: @value * 100;
        filter: ~"alpha(opacity=@{value-ie})"; // IE8
    }

    .border-radius(@radius: 5px) {
        .prefix(border-radius, @radius);
        .prefix(background-clip, padding-box);
    }

    .border-radiuses(@topright: 0, @bottomright: 0, @topleft: 0, @bottomleft: 0) {
        .prefix(border-top-right, @topright);
        .prefix(border-top-left, @topleft);
        .prefix(border-bottom-right, @bottomright);
        .prefix(border-bottom-left, @bottomleft);       
        .prefix(background-clip, padding-box);
    }

    .box-shadow(@string) {
        .prefix-multi(box-shadow, @string);
    }

    .drop-shadow(@x: 0, @y: 1px, @blur: 2px, @spread: 0, @color: @black, @alpha: 25) {
        .prefix-multi(box-shadow, @x @y @blur @spread fade(@color, @alpha));
    }

    .inner-shadow(@x: 0, @y: 1px, @blur: 2px, @spread: 0, @color: @black, @alpha: 25) {
        .prefix-multi(box-shadow, inset @x @y @blur @spread fade(@color, @alpha));
    }

    .drop-glow(@x: 0, @y: 1px, @blur: 2px, @spread: 0, @color: @white, @alpha: 25) {
        .prefix-multi(box-shadow, @x @y @blur @spread fade(@color, @alpha));
    }

    .inner-glow(@x: 0, @y: 0, @blur: 0, @spread: 1px, @color: @white, @alpha: 8) {
        .prefix-multi(box-shadow, inset @x @y @blur @spread fade(@color, @alpha));
    }

/*#endregion*/

/*#region == IMAGES == */

    .background-size(@size) {
        .prefix(background-size, @size);
    }

/*#endregion*/

/*#region == GRADIENTS & STRIPES == */
    // Vertical gradient
    .gradient(@from, @to, @orientation) when (@orientation = vertical) {
        background-color: transparent;
        background-image: -webkit-linear-gradient(top, @from, @to);
        background-image: linear-gradient(to bottom, @from, @to);
    }

    // Horizontal gradient
    .gradient(@from, @to, @orientation) when (@orientation = horizontal) {
        background-color: transparent;
        background-image: -webkit-linear-gradient(left, @from, @to);
        background-image: linear-gradient(to right, @from, @to);
    }

    // Radial gradient
    .gradient(@from, @to, @orientation) when (@orientation = radial) {
        background-color: transparent;
        background: -webkit-radial-gradient(center, ellipse cover, @from 0%, @to 100%);
        background: radial-gradient(ellipse at center, @from 0%, @to 100%);
    }

    // Border gradient
    .border-gradient(@width, @from, @to) {
        border-width: @width;
        border-style: solid;
        -webkit-border-image: -webkit-linear-gradient(right, @from, @to) 100% 1;
        border-image: linear-gradient(right, @from, @to) 100% 1;
    }

    /* Add a diagonal striped background. */
    .striped-bg(@color, @width: 40px) {
        @stripe: lighten(@color, 1.25);
        background-color: @color;
        background-image: -webkit-linear-gradient(45deg, @stripe 25%, transparent 25%, transparent 50%, @stripe 50%, @stripe 75%, transparent 75%, transparent);
        background-image: -moz-repeating-linear-gradient(45deg, @stripe 25%, transparent 25%, transparent 50%, @stripe 50%, @stripe 75%, transparent 75%, transparent);
        background-image: linear-gradient(45deg, @stripe 25%, transparent 25%, transparent 50%, @stripe 50%, @stripe 75%, transparent 75%, transparent);
        background-size: @width @width;
    }
/*#endregion*/

/*#region == ANIMATIONS & TRANSITIONS == */

    .animation(@string) {
        .prefix(animation, @string);
    }

    // Keyframes
    .keyframes(@name; @content) {
        @-webkit-keyframes @name {
            @content();
        }
        @-moz-keyframes @name {
            @content();
        }
        @-ms-keyframes @name {
            @content();
        }
        @-o-keyframes @name {
            @content();
        }
        @keyframes @name {
            @content();
        }
    }


    .transition(@string) {
        .prefix-multi(transition, @string);
    }

    .transform(@string) {
        .prefix(transform, @string);
    }

    .scale(@multiplier) {
        .transform(scale(@multiplier));
    }

    .rotate (@deg) {
        .transform(rotate(@deg));
    }

    .skew (@deg, @deg2) {
        .transform(skew(@deg, @deg2));
    }

    .translate(@x, @y: 0) {
        .transform(translate(@x, @y));
    }

    .translate3d (@x, @y: 0, @z: 0) {
        .transform(translate3d(@x, @y, @z));
    }

    .perspective (@value: 1000) {
        .prefix(perspective, @value);
    }

    .transform-origin (@x: center, @y: center) {
        .prefix(transform-origin, @x @y);
    }
/*#endregion*/

/*#region == SCROLLBARS ==*/
    .scrollbars(@size) when (@size >= 15)  {
        overflow-y: auto;
        overflow-x: hidden;

        &::-webkit-scrollbar {
            width: @size;
        }
        &::-webkit-scrollbar-track {
            background-color: @scrollbar-track;
            border-left: 1px solid @scrollbar-track-border;
        }
        &::-webkit-scrollbar-thumb {
            .inner-glow;
            background-color: @scrollbar-thumb;
            border: 1px solid @scrollbar-thumb-border;
        }
        &::-webkit-scrollbar-button:vertical:increment {
            background: @scrollbar-button url('../@{theme-images}@{scrollbar-arrows}') no-repeat bottom left;
        }
        &::-webkit-scrollbar-button:vertical:decrement {
            background: @scrollbar-button url('../@{theme-images}@{scrollbar-arrows}') no-repeat top left;
        }
        &::-webkit-scrollbar-button:vertical:increment,
        &::-webkit-scrollbar-button:vertical:decrement {
            .inner-glow;
            border: 1px solid @scrollbar-button-border;
            border-width: 0 1px;

            &:hover {
                background-color: @scrollbar-button-hover;
            }
        }
        &::-webkit-resizer {
            background: @scrollbar-resizer-bg url('../@{theme-images}@{scrollbar-resizer-image}') no-repeat bottom right;
        }
    }
    .scrollbars(@size) when (default())  {
        overflow-y: auto;
        overflow-x: hidden;

        &::-webkit-scrollbar {
            width: @size;
        }
        &::-webkit-scrollbar-track {
            background-color: @scrollbar-track;
            border-left: 1px solid @scrollbar-track-border;
        }
        &::-webkit-scrollbar-thumb {
            .inner-glow;
            background-color: @scrollbar-thumb;
            border: 1px solid @scrollbar-thumb-border;
        }
        &::-webkit-resizer {
            background: @scrollbar-resizer-bg url('../@{theme-images}@{scrollbar-resizer-image}') no-repeat bottom right;
        }
    }
/*#endregion*/